## Data I: US House Election Votes from 1976 to 2022

We will use data from [MIT Election Data Science Lab](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2)[^1]. President vote data [^2].

Citations:

[^1]: MIT Election Data and Science Lab, 2017, “U.S. House 1976–2022”, https://doi.org/10.7910/DVN/IG0UN2, Harvard Dataverse, V13, UNF:6:Ky5FkettbvohjTSN/IVldA== [fileUNF]

[^2]: MIT Election Data and Science Lab, 2017, “U.S. President 1976–2020”, https://doi.org/10.7910/DVN/42MVDX, Harvard Dataverse, V8, UNF:6:F0opd1IRbeYI9QyVfzglUw== [fileUNF]

```{r, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Define the path to the CSV file
csv_file_path <- "C:/Users/zhuol/OneDrive/Documents/STA9750-2024-FALL/congressional_shapefiles/1976-2022-house.csv"

# Check if the CSV file exists
if (file.exists(csv_file_path)) {
  # Read the CSV file
  house_1976_2022 <- read.csv(csv_file_path)}
```


```{r, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Define the path to the CSV file
csv_file_path_2 <- "C:/Users/zhuol/OneDrive/Documents/STA9750-2024-FALL/president_data/1976-2020-president.csv"

if (file.exists(csv_file_path_2)) {
  # Read the CSV file
  president_1976_2020 <- read.csv(csv_file_path_2)}

```

## Task 1: Download Congressional Shapefiles 1976-2012[^3]

```{r, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(httr)

# Create directory for UCLA shapefiles
ucla_dir <- "C:/Users/zhuol/OneDrive/Documents/STA9750-2024-FALL/data/UCLA_congress"
dir.create(ucla_dir, showWarnings = FALSE, recursive = TRUE)

# Function to download specific UCLA shapefiles
download_ucla_shapefiles <- function(sessions, base_url) {
  for (session in sessions) {
    file_name <- paste0("districts", sprintf("%03d", session), ".zip")
    url <- paste0(base_url, file_name)
    destfile <- file.path(ucla_dir, file_name)

    # Attempt to download the file without error handling
    response <- GET(url, write_disk(destfile, overwrite = TRUE))
  }
}

# Define the base URL for UCLA shapefiles
ucla_base_url <- "https://cdmaps.polisci.ucla.edu/shp/"

# Specify the sessions for districts 093 to 112
sessions_to_download <- 93:112

# Download the specified UCLA shapefiles
download_ucla_shapefiles(sessions_to_download, ucla_base_url)

```

## Task 2: Download Congressional Shapefiles 2014-2022[^4}]

```{r, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(httr)

# Create directory for Census shapefiles
census_dir <- "C:/Users/zhuol/OneDrive/Documents/STA9750-2024-FALL/data/census_congress"
dir.create(census_dir, showWarnings = FALSE, recursive = TRUE)

# Function to download Census shapefiles systematically
download_census_shapefiles <- function(urls) {
  for (url in urls) {
    file_name <- basename(url)
    destfile <- file.path(census_dir, file_name)

    # Attempt to download the file without error handling
    response <- GET(url, write_disk(destfile, overwrite = TRUE))
  }
}

# Define URLs for Census shapefiles
census_shapefile_urls <- c(
  "https://www2.census.gov/geo/tiger/TIGER2014/CD/tl_2014_us_cd114.zip",
  "https://www2.census.gov/geo/tiger/TIGER2015/CD/tl_2015_us_cd114.zip",
  "https://www2.census.gov/geo/tiger/TIGER2016/CD/tl_2016_us_cd115.zip",
  "https://www2.census.gov/geo/tiger/TIGER2017/CD/tl_2017_us_cd115.zip",
  "https://www2.census.gov/geo/tiger/TIGER2018/CD/tl_2018_us_cd116.zip",
  "https://www2.census.gov/geo/tiger/TIGER2019/CD/tl_2019_us_cd116.zip",
  "https://www2.census.gov/geo/tiger/TIGER2020/CD/tl_2020_us_cd116.zip",
  "https://www2.census.gov/geo/tiger/TIGER2021/CD/tl_2021_us_cd116.zip",
  "https://www2.census.gov/geo/tiger/TIGER2022/CD/tl_2022_us_cd116.zip"
)

# Download Census shapefiles
download_census_shapefiles(census_shapefile_urls)
```

## Importing and Plotting Shape File Data

## Task 4: Automate Zip File Extraction

Reading Data I

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(sf)

# Function to read UCLA shapefiles into R
read_ucla_shapefiles <- function(directory) {
  shapefiles <- list.files(directory, pattern = "\\.zip$", full.names = TRUE)
  results <- list()
  
  for (zip_file in shapefiles) {
    unzip_dir <- tempdir()
    unzip(zip_file, exdir = unzip_dir)
    
    shp_files <- list.files(unzip_dir, pattern = "\\.shp$", full.names = TRUE, recursive = TRUE)
    
    for (shp_file in shp_files) {
      # Attempt to read the shapefile without error handling
      sf_object <- sf::st_read(shp_file, quiet=TRUE)
      results[[basename(shp_file)]] <- sf_object
    }
  }
  
  return(results)
}

# Read the downloaded UCLA shapefiles into R
ucla_shapefiles <- read_ucla_shapefiles(ucla_dir)
```

Reading data II

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Load necessary library
library(sf)

# Function to read specific Census shapefiles into R
read_census_shapefiles <- function(directory, filenames) {
  shapefiles <- list.files(directory, pattern = "\\.zip$", full.names = TRUE)
  results <- list()
  
  for (zip_file in shapefiles) {
    unzip_dir <- tempdir()
    unzip(zip_file, exdir = unzip_dir)
    
    shp_files <- list.files(unzip_dir, pattern = "\\.shp$", full.names = TRUE, recursive = TRUE)
    
    for (shp_file in shp_files) {
      # Check if the shapefile matches the desired filenames
      if (basename(shp_file) %in% filenames) {
        # Attempt to read the shapefile without error handling
        sf_object <- sf::st_read(shp_file, quiet=TRUE)
        results[[basename(shp_file)]] <- sf_object
      }
    }
  }
  
  return(results)
}

# List of specific filenames to read
desired_filenames <- c(
  "tl_2014_us_cd114.shp",
  "tl_2015_us_cd114.shp",
  "tl_2016_us_cd115.shp",
  "tl_2017_us_cd115.shp",
  "tl_2018_us_cd116.shp",
  "tl_2019_us_cd116.shp",
  "tl_2020_us_cd116.shp",
  "tl_2021_us_cd116.shp",
  "tl_2022_us_cd116.shp"
)

# Read the downloaded Census shapefiles into R
census_shapefiles <- read_census_shapefiles(census_dir, desired_filenames)

```


Import data for CD_106

```{r, message=FALSE, warning=FALSE}
library(usmap)
library(tools)
library(sf)
library(tigris)
library(dplyr)
library(ggplot2)
CD_106 <- ucla_shapefiles[["districts106.shp"]]

# Create electoral college votes column
CD_106_EC <- CD_106 |>
  mutate(STATENAME = toupper(STATENAME)) |>
  select(-geometry) |>
  as.data.frame() |>
  group_by(STATENAME) |>
  summarize( EC = n() + 2)
```

## Task 5: 

```{r, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
library(usmap)
library(tools)
library(sf)
library(tigris)
library(dplyr)
library(ggplot2)

# Filter data for year 2000 and determine the winning party per state
president_2000 <- president_1976_2020 %>%
  filter(year == 2000) %>%
  group_by(state) %>%
  mutate(
    winning_party = party_simplified[which.max(candidatevotes)]  # Assign party with max total votes
  ) %>%
  slice_max(candidatevotes, n = 1) %>%  # Only keep the row with the highest totalvotes
  ungroup()  # Ungroup after summarizing

# Perform the join between CD_106_EC and president_2000 by state
president_2000_EC <- CD_106_EC %>%
  left_join(president_2000, by = c("STATENAME" = "state")) %>%
  # Select necessary columns including state_fips
  select(state = STATENAME, EC, winning_party, state_fips)

#import shapefiles for states
us_state_shapefiles <- usmap::us_map(regions = "states")

us_state_shapefiles <- us_state_shapefiles %>%
  mutate(fips = as.integer(fips))

# Now perform the join
merged_data <- president_2000_EC |>
  left_join(us_state_shapefiles, by = c("state_fips" = "fips"))

# Ensure merged_data is a valid sf object
merged_data_sf <- st_as_sf(merged_data)

# Plot the map with colors based on the winning party and add EC vote labels
ggplot(data = merged_data_sf) +
  geom_sf(aes(fill = winning_party), color = "white", size = 0.2) +  # Color by winning party
  scale_fill_manual(values = c("REPUBLICAN" = "red", "DEMOCRAT" = "blue"), 
                    labels = c("REPUBLICAN" = "Bush (Republican)", "DEMOCRAT" = "Gore (Democratic)"), 
                    name = "Winning Party") +  # Red for Republican, Blue for Democrat
  geom_sf_text(aes(label = EC), color = "black", size = 3, fontface = "bold") +  # Add EC vote labels
  theme_minimal() +
  labs(title = "2000 Presidential Election: Winning Party by State") +  # Removed subtitle
  theme(legend.position = "bottom", 
        plot.title = element_text(hjust = 0.5, size = 16))
```



```{r, message=FALSE, warning=FALSE}
library(usmap)
library(tools)
library(sf)
library(tigris)
library(dplyr)
library(ggplot2)

# Modify the function to return data for all years
generate_choropleth_data_for_year <- function(year, district_number, election_data, ucla_shapefiles) {
  
  # Load the specific district shapefile
  district_shapefile <- ucla_shapefiles[[paste0("districts", district_number, ".shp")]]
  
  # Create Electoral College votes column based on the district shapefile
  district_EC <- district_shapefile %>%
    mutate(STATENAME = toupper(STATENAME)) %>%
    select(-geometry) %>%
    as.data.frame() %>%
    group_by(STATENAME) %>%
    summarize(EC = n() + 2)  # 2 for senators per state

  # Filter the election data for the given year
  president_year <- election_data %>%
    filter(year == year) %>%
    group_by(state) %>%
    mutate(
      winning_party = party_simplified[which.max(candidatevotes)]  # Determine the winning party
    ) %>%
    slice_max(candidatevotes, n = 1) %>%  # Only keep the row with the highest total votes
    ungroup()  # Ungroup after summarizing
  
  # Join the election data with the district data (EC votes and winning party)
  president_EC <- district_EC %>%
    left_join(president_year, by = c("STATENAME" = "state")) %>%
    select(state = STATENAME, EC, winning_party, state_fips)
  
  # Load U.S. state shapefiles for mapping
  us_state_shapefiles <- usmap::us_map(regions = "states") %>%
    mutate(fips = as.integer(fips))
  
  # Merge district data with state shapefiles by FIPS code
  merged_data <- president_EC %>%
    left_join(us_state_shapefiles, by = c("state_fips" = "fips"))
  
  # Add the year column to merge data
  merged_data$year <- year
  
  # Return the merged data for all years (instead of a plot)
  return(merged_data)
}

# Generate data for all election years
all_years_data <- bind_rows(
  generate_choropleth_data_for_year(1976, "094", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(1980, "096", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(1984, "098", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(1988, "100", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(1992, "102", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(1996, "104", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(2000, "106", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(2004, "108", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(2008, "110", president_1976_2020, ucla_shapefiles),
  generate_choropleth_data_for_year(2012, "112", president_1976_2020, ucla_shapefiles)
)

# facet graph, work on getting in one column
ggplot(data = all_years_data) +
  geom_sf(aes(fill = winning_party, geometry = geom), color = "white", size = 0.2) +  # Color by winning party
  scale_fill_manual(values = c("REPUBLICAN" = "red", "DEMOCRAT" = "blue"), 
                    labels = c("REPUBLICAN" = "Republican", "DEMOCRAT" = "Democratic"), 
                    name = "Winning Party") +  # Red for Republican, Blue for Democrat
  geom_sf_text(aes(label = EC, geometry = geom), color = "black", size = 3, fontface = "bold") +  # Add EC vote labels
  theme_minimal() +
  labs(title = "2000 Presidential Election: Winning Party by State") +  # Removed subtitle
  theme(legend.position = "bottom", 
        plot.title = element_text(hjust = 0.5, size = 16)) +
  facet_wrap(~ year)
# for annimated, try     transition_year(frame)

```