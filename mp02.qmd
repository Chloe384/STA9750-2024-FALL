
![Hollywood Sign, source: Pixabay](hollywood.jpg)

## Introduction

Hollywood has long been a leader in the global film industry, constantly searching for fresh ideas that not only capture audiences but also achieve commercial success. To achieve this, we will leverage data from the *Internet Movie Database (IMDb)*, which offers a comprehensive collection of information on everything from blockbuster hits to lesser-known independent films. This makes IMDb an invaluable resource for uncovering the patterns that contribute to successful filemaking. In this report, we will explore what makes a movie successful, identifying key characteristics, recognizing noteworthy filmmakers and actors, and analyzing some of the industry's most notorious flops.

## Data Preparation and Cleaning

We will use data from [The IMDb non-commerical Release](https://datasets.imdbws.com/). Files required

-   `NAME_BASICS Table`: Information about people, their professions, birth year, death year, titles person is known for
-   `TITLE_BASICS Table`: Contains film details such as genres, start year, etc.
-   `TITLE_CREW Table`: Information about directors & writers of films
-   `TITLE_EPISODE Table`: Information about season number and episode number
-   `TITLE_PRINCIPALS Table`: Information about actors and their roles in movies/TV shows
-   `TITLE_RATINGS Table`:Contains ratings and IMDb votes for titles

Using the code below, we will use the `get_imdb_file` function to read the files. Because the files are too big to read, I used a smaller version of data. The pre-processed data can be found on [Professor Weylandt's course GitHub respository](https://github.com/michaelweylandt/STA9750/tree/main/miniprojects/mini02_preprocessed).

**Note: The pre-processed files have extra-filtered extracts so my results and answers may be different from other classmates who did not use the pre-processed files.**

```{r echo=TRUE, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

##Load all necessary function packages
library(ggplot2)
library (tidyverse)
library(stringr)
library(dplyr)
library(DT)
library(gt)
library(knitr)

##loading the data files
get_imdb_file <- function(fname) {
  BASE_URL <- "https://github.com/michaelweylandt/STA9750/raw/main/miniprojects/mini02_preprocessed/"
  fname_ext <- paste0(fname, ".csv.zip")
  
  if (!file.exists(fname_ext)) {
    FILE_URL <- paste0(BASE_URL, fname_ext)
    download.file(FILE_URL, destfile = fname_ext)
  }
  
  # Unzip the file and read the CSV
  temp_file <- unzip(fname_ext, list = TRUE)$Name[1] 
  unzip(fname_ext)  
  as.data.frame(readr::read_csv(temp_file)) 
}

NAME_BASICS <- get_imdb_file("name_basics_small")

TITLE_BASICS     <- get_imdb_file("title_basics_small")

TITLE_EPISODES   <- get_imdb_file("title_episodes_small")

TITLE_RATINGS    <- get_imdb_file("title_ratings_small")

TITLE_CREW       <- get_imdb_file("title_crew_small")

TITLE_PRINCIPALS <- get_imdb_file("title_principals_small") 

```

For our `NAME_BASICS` table, I restricted our attention to people with at least two “known for” credits. Looking at the distribution of the `TITLE_RATINGS` table, we see IMDb has a long tail of obscure movies. A majority of IMDb titles have fewer than 100 ratings.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

NAME_BASICS <- NAME_BASICS |> 
    filter(str_count(knownForTitles, ",") > 1)

TITLE_RATINGS |>
    ggplot(aes(x=numVotes)) + 
    geom_histogram(bins=30) +
    xlab("Number of IMDB Ratings") + 
    ylab("Number of Titles") + 
    ggtitle("Majority of IMDB Titles Have Less than 100 Ratings") + 
    theme_bw() + 
    scale_x_log10(label=scales::comma) + 
    scale_y_continuous(label=scales::comma)

```

For the purpose of this report, I threw out any title with less than 100 ratings since those will not provide any meaningful insights to our analysis. Since we filtered numVote \>= 100 for the `TITLE_RATINGS` table, we also need perform the same filtering on our other TITLE\_\* table.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
TITLE_RATINGS <- TITLE_RATINGS |>
    filter(numVotes >= 100)

TITLE_BASICS <- TITLE_BASICS |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_CREW <- TITLE_CREW |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_EPISODES_1 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))
TITLE_EPISODES_2 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(parentTconst == tconst))

TITLE_EPISODES <- bind_rows(TITLE_EPISODES_1,
                            TITLE_EPISODES_2) |>
    distinct()

TITLE_PRINCIPALS <- TITLE_PRINCIPALS |>
    semi_join(TITLE_RATINGS, join_by(tconst == tconst))


rm(TITLE_EPISODES_1)
rm(TITLE_EPISODES_2)
```

## Correct the column types using `as.numeric` and `as.logical`

```{r, warning=FALSE}
# Correcting column types for NAME_BASICS
NAME_BASICS <- NAME_BASICS |>
    mutate(birthYear = as.numeric(birthYear),
           deathYear = as.numeric(deathYear))

# Correcting column types for TITLE_BASICS
TITLE_BASICS <- TITLE_BASICS |> 
    mutate(
        startYear = as.numeric(startYear),
        endYear = as.numeric(endYear),
        isAdult = as.logical(isAdult)
    )

# Correcting column types for TITLE_RATINGS
TITLE_RATINGS <- TITLE_RATINGS |> 
    mutate(
        averageRating = as.numeric(averageRating),
        numVotes = as.numeric(numVotes)
    )

# Correcting column types for TITLE_CREW
TITLE_CREW <- TITLE_CREW |> 
    mutate(
        tconst = as.character(tconst)
    )

# Correcting column types for TITLE_EPISODES
TITLE_EPISODES <- TITLE_EPISODES |> 
    mutate(
        seasonNumber = as.numeric(seasonNumber),
        episodeNumber = as.numeric(episodeNumber)
    )

# Correcting column types for TITLE_PRINCIPALS
TITLE_PRINCIPALS <- TITLE_PRINCIPALS |> 
    mutate(
        tconst = as.character(tconst),
        nconst = as.character(nconst
    ))

```

In the `NAME_BASICS` table, notice how the `primaryProfession` and `knownForTitles` columns combine multiple values using commas.

```{r}
glimpse(NAME_BASICS)
```

We can use the `separate_longer_delim` function to break these into multiple rows.

```{r}
NAME_BASICS <- NAME_BASICS |>
    separate_longer_delim(primaryProfession, ",") |>
    separate_longer_delim(knownForTitles, ",")
```

## Exploratory of Counts of Film productions

**How many movies are in our data set? How many TV series? How many TV episodes?**

The dataset showed that there are 131,662 movies, 29,789 TV series, and 155,722 episodes in IMDb's database.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

title_counts <- TITLE_BASICS |>
    group_by(titleType) |>
  summarize(count = n()) |>
  filter(titleType %in% c('movie', 'tvSeries', 'tvEpisode'))

colnames(title_counts) <- c('Title Type', 'Number of Movies')
title_counts |>
  DT::datatable()

```

## Oldest Living Person

**Who is the oldest living person in our data set?**

The oldest person in out data set is Angel Acciaresi, born in 1908 and currently aged 116.

Note: The oldest living age is 116. Hence, I made a filter assuming 116 is the oldest age a person can ever live.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

current_year = 2024

oldest_living <- NAME_BASICS |> 
    filter(is.na(deathYear)) |>
    filter(birthYear >= (current_year - 116)) |> #make sure age is less than or equal to 116
    arrange(birthYear) |> 
    select(- nconst, 
           - knownForTitles) |>
    slice(1)

oldest_living |>
  gt() |>
  tab_header(title = "Oldest Living Person")
```

## TV Series with Perfect Ratings

**There is one TV Episode in this data set with a perfect 10/10 rating and 200,000 IMDb ratings. What is it? What series does it belong to?**

In our dataset, TV episode "Ozymandias" has a perfect rating 10/10 and 227,589 IMDb votes.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Join with TITLE_RATINGS to find the perfect episodes
perfect_tv_episode <- TITLE_RATINGS |>
    filter(averageRating == 10, numVotes >= 200000) |>
    left_join(TITLE_BASICS, by = "tconst") |>
    select(-'tconst',
           - originalTitle,
           - isAdult,
           - runtimeMinutes)

perfect_tv_episode |>
    gt() |>
    tab_header(title = "TV Episode with Perfect Rating")
```

## Mark Hamill Projects

**What four projects is the actor Mark Hammill most known for?**

Mark Hamill is most known for the following projects:

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Search known titles for Mark Hamill
mark_hamill_projects <- NAME_BASICS |>
  filter(primaryName == "Mark Hamill") |>
  separate_rows(knownForTitles, sep =",") |>
  rename(tconst = knownForTitles) |>
  left_join(TITLE_BASICS, by = "tconst") |>
  left_join(TITLE_RATINGS, by = "tconst") |>
  distinct(primaryTitle, .keep_all = TRUE) |>  # remove duplicates
  arrange(desc(averageRating), desc(numVotes) ) |>
  slice_head(n = 4) |>
  select(primaryTitle, startYear, averageRating, numVotes)

colnames(mark_hamill_projects) <- c('Movie Title', 'Year of Release', 'Avgerage Rating', 'Number of Votes')

mark_hamill_projects |>
  DT::datatable()
```

## Highest Rating TV Series

**What TV series, with more than 12 episodes, has the highest average rating?**

The TV series with the highest average rating and more than 12 episodes is "Made" from 2003.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
top_tv_series <- TITLE_EPISODES |> 
    left_join(TITLE_RATINGS, by = "tconst") |> 
    group_by(parentTconst) |> 
    summarize(
        avg_rating = mean(averageRating, na.rm = TRUE), 
        episode_count = n()
    ) |> 
    filter(episode_count > 12) |> 
    arrange(desc(avg_rating)) |> 
    left_join(TITLE_BASICS, by = c("parentTconst" = "tconst")) |> 
    select(avg_rating, episode_count, titleType, primaryTitle, startYear, endYear, genres) |>
    slice(1)

top_tv_series |>
  gt() |>
  tab_header(title = "Highest Rating for TV series over 12 Episodes")
```

## Happy Days Seasons Rise & Fall

**The TV series Happy Days (1974-1984) gives us the common idiom “jump the shark”. The phrase comes from a controversial fifth season episode (aired in 1977) in which a lead character literally jumped over a shark on water skis. Idiomatically, it is used to refer to the moment when a once-great show becomes ridiculous and rapidly looses quality.**

Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?

Yes, later seasons of Happy Days have an average rating of 6.87 while earlier seasons of Happy Days have an average rating of 7.47.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
happy_days_tconst <- TITLE_BASICS |>
  filter(primaryTitle == "Happy Days") |>
  select(tconst)

# find season & rating
happy_days_episode <- TITLE_EPISODES |>
  filter(parentTconst%in% happy_days_tconst$tconst) |>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  mutate(seasonNumber = as.integer(seasonNumber))

# define early & later season
happy_days_episode <- happy_days_episode |>
  mutate(season_group = ifelse(seasonNumber <=5, "Early", "Later"))

# find rating for early & later season
average_ratings <- happy_days_episode |>
  group_by(season_group) |>
  summarise(average_ratings = mean(averageRating, na.rm = TRUE), .groups = 'drop')

average_ratings |>
  gt() |>
  tab_header(
    title = "Average Ratings of Happy Days by Season"
  ) |>
  cols_label(
    season_group = "Season Group",
    average_ratings = "Average Rating"
  )
```

## Quantifying Success: Custom Success Metric

In `TITLE_RATINGS` table, we see two metrics: average ratings and number of votes. Initial analysis showed that 75% of the titles have fewer than 1,000 votes, indicating a skewed distribution.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

TITLE_RATINGS |>
    pull(numVotes) |>
    quantile()

TITLE_RATINGS |>
    ggplot(aes(x=numVotes)) + 
    geom_histogram(bins=30) +
    xlab("Number of Votes") + 
    ylab("Frequency") + 
    ggtitle("Distribution of NumVotes") + 
    theme_bw() + 
    scale_x_log10(label=scales::comma) + 
    scale_y_continuous(label=scales::comma)
```

My success metric is calculated as:

$$
\text{success} = (0.7 \times \text{averageRating}) + (0.3 \times \log(\text{numVotes}))
$$

This formula reduces the influence of skewed vote counts by employing a logarithmic transformation. A threshold of 9.0 is established to categorize a film as a "success."

```{r}
movies_ratings_success <- full_join(TITLE_RATINGS, TITLE_BASICS, by = 'tconst') |>
  filter(titleType == "movie") |>
  mutate(success = ((averageRating * 0.7) + (log(numVotes) * 0.3))) 
```

## Putting Our Success Metric to Test

**Choose the top 5-10 movies on your metric and confirm that they were indeed box office successes.**

The table shows the top 10 successful movies based on the success metric. These films not only achieved high average ratings but also have large audience awareness, confirming they were indeed box office successes.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

top_success_movies <- movies_ratings_success |> 
  arrange(desc(success)) |>
  select(-'tconst',
         -titleType,
         -originalTitle,
         -isAdult,
         -endYear,
         -runtimeMinutes) |>
  slice_head(n = 10) 

top_success_movies |>
  gt() |>
  tab_header(title = "Top 10 Successful Movies")
```

**Choose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.**

I also found several films with over 100,000 votes that scored poorly on the success metric, illustrating that high popularity does not guarantee quality. These films have average ratings around 3.0 or lower, highlighting a disconnect between viewer engagement and film quality.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

poorly_rated_movies <- movies_ratings_success |>
  filter(success < 8, numVotes > 100000) |>  # Threshold for low success
  select(primaryTitle, averageRating, numVotes, success, startYear) |>
  arrange(success) |>
  head(5)

poorly_rated_movies |>
  gt() |>
  tab_header(
    title = "Movies with Large IMDb Votes but Low Ratings"
  )
```

**Choose a prestige actor or director and confirm that they have many projects with high scores on your success metric.**

The prestige actor I picked was Leaonardo DiCaprio. I found that his projects consistently scored high based on the success metric. These projects have success scores over 10.0, indicating solid reputation for quality and popularity.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Filter name
prestige_actor <- NAME_BASICS |>
  filter(primaryName == "Leonardo DiCaprio") |>
  select(nconst)

## Find the projects for Leonardo DiCaprio.
diCaprio_projects <- TITLE_PRINCIPALS |>
  filter(nconst %in% prestige_actor$nconst) |>
  left_join(movies_ratings_success, by = "tconst") |>
  select(primaryTitle,
         averageRating,
         numVotes,
         success,
         startYear,
         genres) |>
  arrange(desc(success)) |>
  slice_head(n = 5)  

diCaprio_projects |>
  gt() |>
  tab_header(title = "Leonardo DiCaprio's High Success Projects")

```

**Perform at least one other form of ‘spot check’ validation.**

To "spot check" the credibility of the success metric, I'll select 5 movies that are [Oscar Winning](https://m.imdb.com/search/title/?groups=oscar_winner&sort=year,desc) and 5 movies that [Golden Globe winning](https://m.imdb.com/search/title/?groups=golden_globe_winner). The Oscars and Golden Globe awards are prestigious awards in the film industry, hence we should see high success scores for those movies.

**Movies that are Oscar Winning:**

1.  The Silence of the Lambs

2.  Interstellar

3.  Inception

4.  The Dark Knight

5.  Alien

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# find success score for these films
oscar_films <- c('The Silence of the Lambs', 'Interstellar', 'Inception', 'The Dark Knight', 'Alien')
  
oscar_awards <- movies_ratings_success |>
  filter(primaryTitle %in% oscar_films) |>
  select(primaryTitle, averageRating, numVotes, success, startYear)

colnames(oscar_awards) = c('Movie Title', 'Average Rating', "Number of Votes", 'Success Score', 'Year of Release')
oscar_awards |>
  DT::datatable()
```

**Movies that are Golden Globe Winning:**

1.  Oppenheimer

2.  Parasite

3.  The Truman Show

4.  The Godfather

5.  Schindler's List

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# find success score for these films
golden_films <- c("Oppenheimer", "Schindler's List", "The Truman Show", "The Godfather", "Up")
  
golden_awards <- movies_ratings_success |>
  filter(primaryTitle %in% golden_films) |>
  select(primaryTitle, averageRating, numVotes, success, startYear)

colnames(golden_awards) = c('Movie Title', 'Average Rating', "Number of Votes", 'Success Score', 'Year of Release')
golden_awards |>
  DT::datatable()
```

**Come up with a numerical threshold for a project to be a ‘success’; that is, determine a value such that movies above are all “solid” or better.**

The numerical threshold that I defined in order for a project to be a success is 9. A sample of movies with success scores above the threshold is shown below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Define a success threshold
success_threshold = 9

success_movies_above_threshold <- movies_ratings_success |>
  filter(success > success_threshold) |>
  select(primaryTitle, averageRating, numVotes, success, startYear, genres)

success_movies_above_threshold |>
  DT::datatable()
```

## Examining Success by Genre and Decade

**1. What was the genre with the most “successes” in each decade?**

The visual below shows the number of successful movies (according to my threshold in Task 3) per genres in each decade. This graph shows the number of successful films per decade for each genre. The analysis of genres success over decades shows that **Drama** genre consistently led in successful films. **Action** and **Adventure** genres also shows growth in prominence.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Calculate the success by decade and genre for movies with success above threshold
successful_movies_above_threshold <- movies_ratings_success |>
  filter(success > success_threshold) |>
  separate_longer_delim(genres, ",") |>
  mutate(decade = floor(startYear / 10) * 10) 

# Calculate the count of successes for each genre within each decade
success_by_genre_decade <- successful_movies_above_threshold |>
  group_by(decade, genres) |>
  summarize(success_count = n(), .groups = 'drop') |>
  arrange(decade, desc(success_count))

# Plot graph
ggplot(success_by_genre_decade, aes(x = decade, y = success_count, fill = genres)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Top Genres with Most Successes Per Decade", x = "Decade", y = "Success Count") +
  theme_minimal()
```

**2. What genre consistently has the most “successes”? What genre used to reliably produced “successes” and has fallen out of favor?**

Drama remains the genre with the most consistent success, followed by Action and Adventure genres. However, genres like Western and Musical have seen a decline in successful films, suggesting a possible shift in public interest.

```{r, message=FALSE, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

genre_success_by_decade <- success_movies_above_threshold |>
  separate_longer_delim(genres, ',') |>
  mutate(decade = (floor(startYear / 10)) * 10) |>
  group_by(decade, genres) |>
  summarize(movie_count = n()) |>
  ungroup() |>
  group_by(decade) |>
  slice_max(movie_count, n = 10, with_ties = FALSE) |>
  mutate(movies_cumulative = cumsum(movie_count)) |>
  ungroup() |>
  arrange(decade, movies_cumulative)


genre_success_by_decade_plot <- ggplot(genre_success_by_decade, aes(x = decade, 
                                y = movie_count, color = genres)) +
  geom_point() +
  xlab('Decade') +
  ylab('Number of Movies') +
  geom_line() +
  theme_bw() +
  scale_color_brewer(type = 'qual', palette = 2) +
  ggtitle('Successful Movie Genres by Decade Accumulated Over Time')

genre_success_by_decade_plot
```

**3. What genre has produced the most “successes” since 2010? Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?**

Since 2010, Drama genre continued to dominate in producing successful films.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# Filter for movies since 2010
successful_movies_after_2010 <- successful_movies_above_threshold |>
  filter(startYear >= 2010) 

successful_movies_after_2010 |>
  group_by(genres) |>
  summarize(success_count = n(), .groups = 'drop') |>
  arrange(desc(success_count)) |>
  ggplot(aes(x = reorder(genres, -success_count), y = success_count)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Most Successful Genres Since 2010", x = "Genres", y = "Success Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

**4. What genre has become more popular in recent years?**

Based on my analysis, the **Drama** genre has shown consistent popularity in success during the early 2000s. In addition, Action and Adventures genres also have experienced a notable increase in successful films, suggesting a trend towards engaging storytelling that captures the audience's emotions. Hence, Drama, Action, and Adventure genres are recommended for investment.

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

successes_2010 <- success_movies_above_threshold |>
  separate_longer_delim(genres, ',') |>
  mutate(decade = (floor(startYear / 10)) * 10) |>
  filter(decade >= 2010) |>
  group_by(genres) |>
  summarize(movie_count = n()) |>
  slice_max(movie_count, n = 10) |>
  arrange(desc(movie_count))

successes_2010_plot <- ggplot(successes_2010, aes(x = genres, y = movie_count, fill = genres)) +
  geom_col(width = 0.4) + 
  xlab('Genre') +
  ylab('Number of Movies') +
  theme_bw() +
  scale_fill_brewer(type = 'qual', palette = 8) + 
  ggtitle('Count of Successful Movies by Genre Since 2010')

successes_2010_plot
```

## Finding Successful Personnel in the Genres

Based on our findings, I recommend with an upcoming project in the Drama genre. This genre has a unique ability to resonate with audiences on a profound level, making it a timeless choice for cinematic exploration. For my project remake, I want to find directors and actors with high success projects.

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Identify successful directors from the filtered movies
successful_directors <- TITLE_PRINCIPALS |>
  filter(tconst %in% successful_movies_above_threshold$tconst & category == "director") |>
  select(tconst, nconst) |>
  inner_join(NAME_BASICS, by = "nconst") |>
  distinct(tconst, nconst, .keep_all = TRUE) |>  # Keep only unique pairs of tconst and nconst
  group_by(primaryName) |>
  summarise(success_count = n(), .groups = 'drop') |>
  arrange(desc(success_count)) |>
  slice_head(n = 5)  # Keep the top 5 directors

colnames(successful_directors) <- c('Director Name', 'Successful Movies Count')

successful_directors |>
  DT::datatable()
```

After looking over the options, I’ve decided to choose **Steven Spielberg** as the director for our remake. His incredible storytelling and ability to create engaging narratives across various genres make him a great fit for this project. With a remarkable track record, Spielberg has directed countless successful films, including classics like *Jurassic Park* and *Schindler’s List*. His strong background in character development and emotional depth makes him an excellent choice for this project. Spielberg’s expertise ensures that our film will not only be captivating but also resonate with audiences on a deeper level.

### Selected Actors:

**Brad Pitt**: Choosing Brad Pitt for our drama remake is a smart decision. He brings a lot of versatility and emotional depth to his roles. Known for his performances in films like *Se7en* and *The Curious Case of Benjamin Button*, Pitt is great at showing complex emotions, which will help connect audiences to the story. According to my analysis, he has 17 successful projects with a success score of over 9.0, which speaks to his ability to resonate with viewers. His strong box office appeal will attract more audiences, and his collaborations with top directors highlight his commitment to quality storytelling. With his talent and charisma, Pitt is the ideal choice to elevate the film’s impact and authenticity.

**Robert De Niro**: De Niro is often seen as one of the greatest actors of his generation, with a remarkable career that has made a lasting impression on film. With 17 successful projects, including classics like *Taxi driver*, he brings experience and intensity to his roles. His performances are always layered and thought-provoking, allowing him to explore the complexities of human nature. Having him in our film would not only attract long-time fans but also add authenticity and depth to our story.

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"
# Identify successful actors from the filtered movies
successful_actors <- TITLE_PRINCIPALS |>
  filter(tconst %in% successful_movies_above_threshold$tconst & category == "actor") |>
  select(tconst, nconst) |>
  inner_join(NAME_BASICS, by = "nconst") |>
  distinct(tconst, nconst, .keep_all = TRUE) |>  # Keep only unique pairs of tconst and nconst
  group_by(primaryName) |>
  summarise(success_count = n(), .groups = 'drop') |>
  arrange(desc(success_count)) |>
  slice_head(n = 5)  # Keep the top 5 actors

colnames(successful_actors) <- c('Actor Name', 'Successful Movies Count')

successful_actors |>
  DT::datatable()
```

## Nostalgia & Remakes

For my project, I'm choosing to remake ["The Shawshank Redemption"](https://www.imdb.com/title/tt0111161/). With an average of 9.3 from over 2.9 million votes, I believe this movie would be a great choice for remake.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Define the criteria for classic movies
current_year <- as.numeric(format(Sys.Date(), "%Y"))
max_remake_year <- current_year - 25  # No remakes in the last 25 years
success_threshold <- 9.0 

# Find classic movies in the Drama genre with your success metric
classic_movies <- movies_ratings_success |>
  filter(grepl("Drama", genres) & titleType == "movie") |>
  filter(startYear <= max_remake_year & success >= success_threshold) |>
  select(primaryTitle, startYear, success, averageRating, numVotes)

top_classic_movies <- classic_movies |>
  arrange(desc(success)) |>
  head(10)

classic_movies_table <- top_classic_movies |>
  gt() |>
  tab_header(title = "Top Classic Drama Movies to Remake") |>
  cols_label(
    primaryTitle = "Movie Title",
    startYear = "Release Year",
    success = "Success Score"
  )
classic_movies_table
```

There are several legal considerations to address. A handful of actors, directors, and writers are still living, given that this movie was made just over 30 years ago. This situation will require me to reach out to our legal department to confirm our chances of securing the rights for our project.

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

movie_title <- "The Shawshank Redemption"

# Find the tconst for the specified movie
shawshank_tconst <- TITLE_BASICS |>
  filter(originalTitle == movie_title) |>
  select(tconst) |>
  pull()

# Get the original talent for The Shawshank Redemption
original_talent_shawshank <- TITLE_PRINCIPALS |>
  filter(tconst == shawshank_tconst) |>
  inner_join(NAME_BASICS, by = "nconst") |>
  filter(is.na(deathYear) | deathYear == 0) |>
  select(primaryName, category)

# Delete duplicates
original_talent_shawshank <- original_talent_shawshank |>
  distinct(primaryName, category, .keep_all = TRUE)

original_talent_table_shawshank <- original_talent_shawshank |>
  gt() |>
  tab_header(title = "Original Talent from The Shawshank Redemption (Alive)") |>
  cols_label(
    primaryName = "Talent Name",
    category = "Role"
  )

# Display the table
original_talent_table_shawshank
```

## Elevator Pitch: “The Shawshank Redemption” Remake

![The Shawshank Redemption, source: IMDb](The%20Shawshank%20Redemption.png)

In our analysis in Examining Success by Genre and Decade, we found that drama have shown consistent success and box office results. We propose a remake of the classic ***The Shawshank Redemption (1994)***, one of the greatest dramas ever made, with an IMDb rating of 9.3 and millions of fans. Since it hasn’t been remade in 25 years, this is the perfect time to bring it back for a new audience.

We envision [Steven Spielberg](https://en.wikipedia.org/wiki/Steven_Spielberg) directing. He is one of the greatest film directors of Hollywood era and is one of the most successful director in film history. With 38 successful films, he masters in telling engaging stories and creating deep characters, making him a reliable choice for box office success. Spielberg also has a strong reputation for delivering great quality works and is a frequent contener for the Academy Awards. Having him on board as a director would definitely bring prestige to our project.

We would like to invite Brad Pitt and Robert De Niro in lead roles. Pitt, known for his emotionally rich portrayals, brings charisma and depth, while De Niro, with his unmatched gravitas, guarantees a powerful on-screen presence. Their collaboration will create a compelling journey that resonates with both old fans and newcomers.

To honor the legacy of the original, we’re considering a special cameo from Tim Robbins, who portrayed Andy Dufresne. This meaningful link would resonate deeply with fans and bridge the gap between the past and present. With its amazing story, star-studded cast, and Spielberg’s direction, this remake has the potential to redefine ***The Shawshank Redemption*** for a new generation and keep it in the conversation for years to come. We believe this project could achieve both critical acclaim and box office success!

> *From the legendary director Steven Spielberg, the visionary behind cinematic masterpieces like Jaws and Schindler’s List…*
>
> *Starring the charismatic Brad Pitt, beloved for his unforgettable roles in Fight Club…*
>
> *Alongside the iconic Robert De Niro, a Hollywood titan of the Drama genre…*
>
> *Prepare for a breathtaking reimagining of the timeless classic, The Shawshank Redemption…*
>
> *Experience a powerful story of redemption, identity, and the intricate tapestry of human relationships…*
>
> *The Shawshank Redemption. Coming soon to a theater near you.*

