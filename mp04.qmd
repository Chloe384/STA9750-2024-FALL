# Mini Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans

In this mini-project, we use Monte Carlo simulations to evaluate and guide the selection of a retirement plan based on various financial data. The code fetches historical data from sources like AlphaVantage and FRED, which is then used to model the performance of different asset classes. Below is an explanation of the key components of the code.


## Introduction

At the [City University of New York (CUNY)](https://www.cuny.edu/), new faculty members must decide between [two retirement plans](https://www.cuny.edu/wp-content/uploads/sites/4/page-assets/about/administration/offices/hr/benefits/Benefits-Guide-Retirement-Plans-Final-HEO-and-ECP.pdf) within 30 days. Given the long-term impact and significance of this decision, it is essential that they carefully weigh their options, as this choice will shape their financial security throughout retirement.

## CUNY Retirement Plans

The City University of New York (CUNY) provides its employees with a choice between two retirement plans: the traditional, defined-benefit Teachers Retirement System (TRS) plan, and the newer, defined-contribution Optional Retirement Plan (ORP).

### Teachers Retirement System

The Teachers Retirement System (TRS) is a traditional, defined-benefit plan that guarantees employees a set monthly benefit upon retirement, based on factors like salary and years of service.

### Optional Retirement Plan

In contrast, the Optional Retirement Plan (ORP) operates as a defined-contribution plan, where both employees and employers make contributions to individual investment accounts. The retirement benefits are determined by the performance of these investments.

This project aims to utilize historical financial data along with a bootstrap inference method to assess the two retirement plans available at CUNY, providing data-driven insights for employees’ retirement planning.

For this analysis, we will use data from two primary financial and economic sources: AlphaVantage and the Federal Reserve Economic Data (FRED) repository. AlphaVantage is a commercial data provider offering APIs that deliver both real-time and historical stock market data. The FRED repository, managed by the Federal Reserve Bank of St. Louis, grants access to an extensive range of economic data and financial metrics.

## Data Sources

For this project, we will be accessing data from both AlphaVantage and FRED through their password-protected APIs. Before accessing these APIs, we will need to register for API keys for each of the respective APIs: [AlphaVantage registration](https://www.alphavantage.co/support/#api-key) and [FRED registration](https://fredaccount.stlouisfed.org/login/secure/).

First, we will begin with importing all the necessary libraries required for this project.

```{r echo = TRUE, results = "hide", message = FALSE, warning = FALSE}
#| code-fold: true

# Install necessary packages

if(!require("dplyr")) install.packages("dplyr")
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("sf")) install.packages("sf")
if(!require("haven")) install.packages("haven")
if(!require("DT")) install.packages("DT")
if(!require("gt")) install.packages("gt")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("RColorBrewer")) install.packages("RColorBrewer")
if(!require("stringr")) install.packages("stringr")
if(!require("patchwork")) install.packages("patchwork")
if(!require("gganimate")) install.packages("gganimate")
if(!require("zoom")) install.packages("zoom")
if(!require("gridExtra")) install.packages("gridExtra")
if(!require("httr2")) install.packages("httr2")
if(!require("readxl")) install.packages("readxl")
if(!require("ggcorrplot")) install.packages("ggcorrplot")
if(!require("knitr")) install.packages("knitr")


# Load packages into R

library(dplyr)
library(tidyverse)
library(sf)
library(haven)
library(DT)
library(gt)
library(ggplot2)
library(RColorBrewer) 
library(stringr)
library(patchwork) 
library(gganimate)
library(zoom)
library(gridExtra) 
library(httr2)
library(readxl) 
library(ggcorrplot) 
library(knitr)
```

Next, we will get the API keys and url links from AlphaVantage and FRED.

## Task 1: Register for AlphaVantage API Key

```{r echo = TRUE, results = "hide", message = FALSE, warning = FALSE}
#| code-fold: true

apikey <- readLines("C:/Users/zhuol/OneDrive/Documents/STA9750-2024-FALL/API Key")
ALPHAVANTAGE_URL <- "https://www.alphavantage.co/query"

```

## Task 2: Register for FRED API Key

```{r echo = TRUE, results = "hide", message = FALSE, warning = FALSE}
#| code-fold: true
FRED_URL <- "https://api.stlouisfed.org/fred/series/observations"
fredkey <- readLines("C:/Users/zhuol/OneDrive/Documents/STA9750-2024-FALL/FRED Key")
```

## Data Acquisition

To begin the Monte Carlo analysis, we will need historical data covering the following:

-   Wage Growth
-   Inflation
-   US Equities
-   International Equities
-   Bond
-   Short-Term

Below are the 6 data sets retrieved from either the AlphaVantage or FRED API’s. There are various data sets to choose from for each of these metrics, the choice made is dependent on various factors such as the extent of historical data.

#### Wage Growth

```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Set working directory and path for saving the file
dir <- getwd()
save_path_wage <- file.path(dir, "wage.zip")

# Check if the file doesn't exist locally and download it if necessary
if (!file.exists(save_path_wage)) {
  # Request data from FRED API for wage data
  fred_req_wage <- request("https://api.stlouisfed.org/fred/series/observations") |>
    req_url_query(
      series_id = "FRBATLWGT3MMAUMHWGWSFT",  # Series ID for wage data
      api_key = fredkey,                # FRED API key
      file_type = "xls"                      # Specify Excel file type
    )
  
  # Perform the request and save the response as a raw file
  fred_resp_wage <- fred_req_wage |>
    req_perform()
  
  # Save the raw data to the specified file path
  fred_resp_wage |>
    resp_body_raw() |>
    writeBin(save_path_wage)
}

# Define temporary directory and extract the contents of the ZIP file
td <- tempdir()
zip_contents_wage <- unzip(save_path_wage, exdir = td)

# Read the Excel file from the extracted contents
fred_wage <- read_excel(zip_contents_wage, sheet = 2)

wage_growth_data <- fred_wage |>
  select(c('observation_date', 'FRBATLWGT3MMAUMHWGWSFT')) |>
  rename(wage_growth = 'FRBATLWGT3MMAUMHWGWSFT') # annualized median wage growth rate

```

#### Inflation

```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Set working directory and path for saving the file
dir <- getwd()
save_path_inflation <- file.path(dir, "inflation.zip")

# Check if the file doesn't exist locally and download it if necessary
if (!file.exists(save_path_inflation)) {
  # Request data from FRED API for inflation data (CPI)
  fred_req_inflation <- request("https://api.stlouisfed.org/fred/series/observations") |>
    req_url_query(
      series_id = "FPCPITOTLZGUSA",  # Series ID for CPI (Consumer Price Index)
      api_key = fredkey,              # FRED API key
      file_type = "xls"               # Specify Excel file type
    )
  
  # Perform the request and save the response as a raw file
  fred_resp_inflation <- fred_req_inflation |>
    req_perform()
  
  # Save the raw data to the specified file path
  fred_resp_inflation |>
    resp_body_raw() |>
    writeBin(save_path_inflation)
}

# Define temporary directory and extract the contents of the ZIP file
td <- tempdir()
zip_contents_inflation <- unzip(save_path_inflation, exdir = td)

# Read the Excel file from the extracted contents
fred_inflation <- read_excel(zip_contents_inflation, sheet = 2)

# Select and clean the data for inflation rate calculation
inflation_data <- fred_inflation |>
  select(c('observation_date', 'FPCPITOTLZGUSA')) |>
  rename(inflation_rate = 'FPCPITOTLZGUSA')  # Rename CPI column to 'inflation_rate'

# Optionally: Convert the data to date format and process inflation growth
inflation_data <- inflation_data |>
  mutate(
    observation_date = as.Date(observation_date),
    inflation_growth = (inflation_rate / lag(inflation_rate) - 1) * 100  # Calculate the period-to-period growth rate
  ) %>%
  drop_na()  # Drop NA values for calculations
```

#### US Equity Market Returns

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Request monthly adjusted data for SPY (U.S. Equity Market)
spy_file <- request(ALPHAVANTAGE_URL) |>
  req_url_path("query") |>
  req_url_query(
    `function` = "TIME_SERIES_MONTHLY_ADJUSTED",  # Request monthly time series data
    apikey = apikey,                     # AlphaVantage API key
    datatype = "csv",                    # Data format as CSV
    symbol = "SPY"                   
  ) |>
  req_perform()

# Read the CSV data for SPY (U.S. Equity Market)
spy_data <- read_csv(resp_body_string(spy_file))
us_equity_data <- spy_data |>
  select(c('timestamp', 'adjusted close')) |>
  rename(us_equity_index = 'adjusted close') |>
  rename(observation_date = 'timestamp')



```

#### International Equity Market Returns

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Request monthly adjusted data for VEU (International Equity Market)
veu_file <- request(ALPHAVANTAGE_URL) |>
  req_url_path("query") |>
  req_url_query(
    `function` = "TIME_SERIES_MONTHLY_ADJUSTED",  # Request monthly time series data
    apikey = apikey,                     # AlphaVantage API key
    datatype = "csv",                  
    symbol = "VEU"                  
  ) |>
  req_perform()

# Read the CSV data for SPY (U.S. Equity Market)
veu_data <- read_csv(resp_body_string(veu_file))
intl_equity_data <- veu_data |>
  select(c('timestamp', 'adjusted close')) |>
  rename(intl_equity_index = 'adjusted close') |>
  rename(observation_date = 'timestamp')




```

#### Bond market returns

```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Set working directory and path for saving the file
dir <- getwd()
save_path_bond <- file.path(dir, "bond.zip")

# Check if the file doesn't exist locally and download it if necessary
if (!file.exists(save_path_bond)) {
  # Request data from FRED API for 10-year treasury bond yields
  fred_req_bond <- request("https://api.stlouisfed.org/fred/series/observations") |>
    req_url_query(
      series_id = "GS10",  # Series ID for 10-year treasury yield
      api_key = fredkey,    # FRED API key
      file_type = "xls"     # Specify Excel file type
    )
  
  # Perform the request and save the response as a raw file
  fred_resp_bond <- fred_req_bond |>
    req_perform()
  
  # Save the raw data to the specified file path
  fred_resp_bond |>
    resp_body_raw() |>
    writeBin(save_path_bond)
}

# Define temporary directory and extract the contents of the ZIP file
td <- tempdir()
zip_contents_bond <- unzip(save_path_bond, exdir = td)

# Read the Excel file from the extracted contents
fred_bond <- read_excel(zip_contents_bond, sheet = 2)

# Select and clean the data for bond market returns
bond_data <- fred_bond |>
  select(c('observation_date', 'GS10')) |>
  rename(bond_yield = 'GS10')  # Rename column for clarity


```

#### Short-Term Debt Returns

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Set working directory and path for saving the file
dir <- getwd()
save_path_short_term <- file.path(dir, "short_term_debt.zip")

# Check if the file doesn't exist locally and download it if necessary
if (!file.exists(save_path_short_term)) {
  # Request data from FRED API for Short-Term Debt (2-Year Treasury Yield)
  fred_req_short_term <- request("https://api.stlouisfed.org/fred/series/observations") |>
    req_url_query(
      series_id = "GS2",  # Series ID for 2-Year Treasury Yield
      api_key = fredkey,   # FRED API key
      file_type = "xls"    # Specify Excel file type
    )
  
  # Perform the request and save the response as a raw file
  fred_resp_short_term <- fred_req_short_term |>
    req_perform()
  
  # Save the raw data to the specified file path
  fred_resp_short_term |>
    resp_body_raw() |>
    writeBin(save_path_short_term)
}

# Define temporary directory and extract the contents of the ZIP file
td <- tempdir()
zip_contents_short_term <- unzip(save_path_short_term, exdir = td)

# Read the Excel file from the extracted contents
short_term_debt <- read_excel(zip_contents_short_term, sheet = 2)


```

## Task 4: Investigation and Visualization of Input Data

Before beginning our retirement plan comparison analysis, we will do some preliminary exploration analysis on the 6 data sets imported to get familiar with our data. 

Let's begin by examining wage growth over time. We observe a decline in wage growth during the 2010s, which reflects the impact of the Great Recession. Another notable shift is the increase in wage growth following the 2020s, driven in part by the economic recovery after the COVID-19 pandemic, labor shortages, and the rising demand for workers in certain sectors. These factors have contributed to stronger wage growth as companies compete for talent and adjust to new economic conditions.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
ggplot(wage_growth_data, aes(x = observation_date, y = wage_growth)) +
  geom_line(color = "blue") +
  labs(title = "Wage Growth Over Time",
       x = "Date",
       y = "Wage Growth (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  

```
The graph below illustrates the inflation rate from 1960 to 2020. One notable trend is the sharp peak in inflation, surpassing 10% in the 1980s, driven by factors such as oil price shocks and high demand following economic instability. Inflation then steadily decreased, reaching its lowest point in the 2010s, partly due to a combination of low energy prices, global trade, and central bank policies aimed at stabilizing the economy after the 2008 financial crisis.


```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Plot Inflation Rate Over Time
ggplot(inflation_data, aes(x = observation_date, y = inflation_rate)) +
  geom_line(color = "red") +
  labs(title = "Inflation Rate Over Time",
       x = "Date",
       y = "Inflation Rate (%)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```
Now, let's look into the correlation between wage growth and inflation rate. 

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Combine wage growth and inflation data
inflation_wage <- inner_join(wage_growth_data, inflation_data, by = "observation_date") |>
  arrange(observation_date) |>
  # Calculate monthly inflation if not directly available; otherwise, use the inflation_rate column if available
  mutate(inflation = round((inflation_rate - lag(inflation_rate)) / lag(inflation_rate) * 100, 2)) |>
  drop_na() |>
  filter(year(observation_date) > 2004)  # Only use data from the past 20 years

```


In addition, I want to measure the correlation of factors such as averages and variances for wage and inflation.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Calculate long-term averages (mean) and variances for wage growth and inflation
wage_inflation_stats <- inflation_wage %>%
  summarise(
    avg_wage_growth = mean(wage_growth, na.rm = TRUE),
    var_wage_growth = var(wage_growth, na.rm = TRUE),
    avg_inflation_rate = mean(inflation_rate, na.rm = TRUE),
    var_inflation_rate = var(inflation_rate, na.rm = TRUE)
  )

# Calculate correlation between wage growth and inflation
correlation <- cor(inflation_wage$wage_growth, inflation_wage$inflation_rate, use = "complete.obs")

# Create a summary table for wage growth and inflation
summary_table <- data.frame(
  Metric = c("Wage Growth (Avg)", "Wage Growth (Variance)", "Inflation Rate (Avg)", "Inflation Rate (Variance)", "Correlation"),
  Value = c(
    round(wage_inflation_stats$avg_wage_growth, 2),
    round(wage_inflation_stats$var_wage_growth, 2),
    round(wage_inflation_stats$avg_inflation_rate, 2),
    round(wage_inflation_stats$var_inflation_rate, 2),
    round(correlation, 2)
  )
)

# Print the summary table
kable(summary_table, col.names = c("Metric", "Value"), caption = "Summary of Wage Growth and Inflation")

```

**Average Wage Growth**: Wage growth is an important indicator for economic well-being. If wage growth outpaces inflation, it suggests that workers' purchasing power is increasing. In this case, an average of 3.52% suggests moderate wage improvements over the observed period.

**Variance of Wage Growth**: A variance of 1.19 indicates some variability in the wage growth rates, but it's relatively moderate compared to other economic factors. It suggests that while wages generally grew over time, the pace of growth was not consistent year after year. This could be due to external factors like economic recessions, inflationary shocks, or changes in labor market conditions.

**Average Inflation Rate**: An average inflation rate of 2.56% is relatively moderate. Typically, central banks target an inflation rate of around 2%, so this figure suggests a fairly stable price environment. A moderate inflation rate like this usually allows for economic growth while avoiding the negative effects of both high inflation (which erodes purchasing power) and deflation (which can stifle economic activity).

**Variance of Inflation rate**: A variance of 3.43 suggests periods of significant inflationary volatility, possibly due to external economic shocks (e.g., energy price fluctuations, supply chain disruptions) or changing economic conditions (e.g., fiscal policy, demand shocks). This can be more concerning because high variability in inflation can make it harder for consumers and businesses to plan financially.

**Correlation**: The moderate correlation of 0.46 indicates that while wage growth and inflation are somewhat related, other economic factors play significant roles in influencing each of these metrics. Understanding this relationship can be useful for financial planning, as the purchasing power of wages is directly impacted by inflation.

The graph below illustrates the relationship between wage growth and inflation over time. It reveals a noticeable upward trend, where periods of increasing wage growth often align with rising inflation rates. This correlation suggests that when wages rise, inflation tends to follow, possibly due to higher consumer spending and increased demand for goods and services. Conversely, when wage growth slows, inflation also tends to ease, indicating the interconnected nature of these two economic factors. This dynamic reflects broader economic cycles and can be influenced by various factors such as supply and demand, monetary policy, and external economic shocks.


```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Plot the relationship between wage growth and inflation rate
ggplot(inflation_wage, aes(x = inflation_rate, y = wage_growth)) +
  geom_point(color = "blue", alpha = 0.6) +  # Add points
  geom_smooth(method = "lm", color = "red", se = FALSE) +  # Add a linear regression line
  theme_minimal() +
  labs(
    title = "Relationship Between Wage Growth and Inflation Rate",
    x = "Inflation Rate (%)",
    y = "Wage Growth (%)"
  )
```

Now, let's explore the correlations between US equity and international equities.

First, combine US equity data with the international equity data.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Combine US equity and international equity data
equity_data <- inner_join(us_equity_data, intl_equity_data, by = "observation_date") |>
  arrange(observation_date) |>
  filter(year(observation_date) > 2004)  # Only use data from the last 20 years

# Rename columns to simplify
equity_data <- equity_data %>%
  rename(
    us_equity_return = 'us_equity_index',  # Replace with actual column name for US equity returns
    international_equity_return = 'intl_equity_index'  # Replace with actual column name for international equity returns
  )
```

Then, we plot the US Equity market returns against the International Equity market returns into a scattered plot. Looking at the plot, it looks like there's a positive correlation between the two metrics. This suggests that as the market return for US equity rises, there's a high likely possibility that the International equity's market return will also rise.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
equity_data |>
  ggplot(aes(x = us_equity_return,
             y = international_equity_return)) +
  geom_point() +
  geom_smooth() +
  theme_bw() +
  labs(title = "US Equity Market Returns vs International Equity Market Returns",
       x = "US Equity Market Returns",
       y = "International Equity Market Returns")
```

Lastly, let's look at the correlation between bond return and short term debt return. Similar to what we did before, first we will combine the two datasets together to create a scattered plot.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Combine Bond Return and Short-Term Debt Return datasets by observation_date
bond_short_term_data <- inner_join(bond_data, short_term_debt, by = "observation_date") |>
  arrange(observation_date) |>
  filter(year(observation_date) > 2004)  # Use data from the past 20 years (2005-2024)

# Rename columns for ease of use
bond_short_term_data <- bond_short_term_data %>%
  rename(
    bond_return = 'bond_yield',  # Replace with actual column name for bond returns
    short_term_debt_return = 'GS2'  # Replace with actual column name for short-term debt returns
  )

# Calculate the correlation between bond returns and short-term debt returns
correlation_bond_short_term <- cor(bond_short_term_data$bond_return, bond_short_term_data$short_term_debt_return, use = "complete.obs")


# Create the scatter plot to visualize the relationship between bond return and short-term debt return
ggplot(bond_short_term_data, aes(x = short_term_debt_return, y = bond_return)) +
  geom_point(color = "green", alpha = 0.6) +  # Add points with transparency
  geom_smooth(method = "lm", color = "red", se = FALSE) +  # Add a linear regression line without confidence interval
  theme_minimal() +
  labs(
    title = "Relationship Between Bond Return and Short-Term Debt Return",
    x = "Short-Term Debt Return (2-Year Treasury Yield) (%)",
    y = "Bond Return (%)"
  )

print(correlation_bond_short_term)
```

A correlation of 0.83 implies a strong and positive relationship between bond returns and short-term debt returns. This means that changes in one are typically reflected in changes in the other, and this information is crucial for making informed decisions about investing in these two types of fixed-income instruments. It also suggests that investors can expect similar movements in both asset classes, which could influence decisions about asset allocation and diversification in investment portfolios.

## Task 5: Historical Comparison

In this task, we examine the hypothetical scenario of an employee hired by CUNY in 2005 and retiring in October 2024. We compare the total contributions to the Teacher Retirement System (TRS) and the Optional Retirement Plan (ORP) over the employee’s career, from 2005 to 2024. The analysis will highlight the differences in employer and employee contributions, providing insights into the better retirement plan option for the employee.

Assumptions for the Hypothetical Employee: 

- The employee is hired at age 40 in January 2005 with a starting salary of $75,000. 
- The salary grows at an annual rate of 3%. - The employee works for 20 years, retiring at age 60 at the end of October 2024. 
- Contributions to both retirement plans (TRS and ORP) are calculated based on the salary each year.
- Employer contributions are fixed for TRS at 8% and for ORP, at 8% for the first 7 years and 10% thereafter.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Set initial parameters
starting_salary <- 75000  # Starting salary for the hypothetical employee
salary_growth_rate <- 0.03  # Annual salary growth rate of 3%
years_worked <- 20  # Number of years worked (2005 to 2024)
retirement_age <- 60  # Age at retirement

# Function to calculate employee and employer contributions for TRS and ORP
calculate_contributions <- function(starting_salary, salary_growth_rate, years_worked) {
  # Initialize vectors to store the data
  salary <- numeric(years_worked)
  employee_contrib_trs <- numeric(years_worked)
  employer_contrib_trs <- numeric(years_worked)
  employee_contrib_orp <- numeric(years_worked)
  employer_contrib_orp <- numeric(years_worked)
  total_contrib_orp <- numeric(years_worked)
  total_contrib_trs <- numeric(years_worked)
  age <- numeric(years_worked)
  
  # Loop through each year to calculate the data
  for (i in 1:years_worked) {
    current_salary <- starting_salary * (1 + salary_growth_rate)^(i-1)
    age[i] <- 35 + i  # Age starts at 35 and increases by 1 each year
    
    # TRS Contributions (based on salary)
    if (current_salary <= 45000) {
      employee_contrib_trs[i] <- current_salary * 0.03
    } else if (current_salary <= 55000) {
      employee_contrib_trs[i] <- current_salary * 0.035
    } else if (current_salary <= 75000) {
      employee_contrib_trs[i] <- current_salary * 0.045
    } else if (current_salary <= 100000) {
      employee_contrib_trs[i] <- current_salary * 0.0575
    } else {
      employee_contrib_trs[i] <- current_salary * 0.06
    }
    
    # Employer Contributions for TRS (Fixed 8% for simplicity, adjust if more info is available)
    employer_contrib_trs[i] <- current_salary * 0.08
    
    # ORP Contributions (Employee contribution is similar to TRS)
    employee_contrib_orp[i] <- employee_contrib_trs[i]  # Same contribution rate as TRS
    
    # Employer Contributions for ORP (8% for first 7 years, 10% thereafter)
    if (i <= 7) {
      employer_contrib_orp[i] <- current_salary * 0.08
    } else {
      employer_contrib_orp[i] <- current_salary * 0.10
    }
    
    # Total Contributions for ORP
    total_contrib_orp[i] <- employee_contrib_orp[i] + employer_contrib_orp[i]
    
    # Total Contributions for TRS (assuming no investment returns for simplicity)
    total_contrib_trs[i] <- employee_contrib_trs[i] + employer_contrib_trs[i]
    
    # Save salary value
    salary[i] <- current_salary
  }
  
  # Create a data frame with all the calculated data
  contributions_data <- data.frame(
    Year = 2005 + 0:(years_worked-1),
    Salary = salary,
    `Employee Contributions (TRS)` = employee_contrib_trs,
    `Employer Contributions (TRS)` = employer_contrib_trs,
    `Total Contributions (TRS)` = total_contrib_trs,
    `Employee Contributions (ORP)` = employee_contrib_orp,
    `Employer Contributions (ORP)` = employer_contrib_orp,
    `Total Contributions (ORP)` = total_contrib_orp,
    Age = age
  )
  
  return(contributions_data)
}

# Calculate the contributions
contributions_data <- calculate_contributions(starting_salary, salary_growth_rate, years_worked)

# Create a comparison table using kable
kable(contributions_data, 
      col.names = c("Year", "Salary After Adjustments", "Employee Contributions (TRS)", 
                    "Employer Contributions (TRS)", "Total Contributions (TRS)", 
                    "Employee Contributions (ORP)", "Employer Contributions (ORP)", 
                    "Total Contributions (ORP)", "Age"),
      caption = "ORP Employee and Employer Yearly Contributions",
      format = "html",
      digits = 2,
      align = c("l", "r", "r", "r", "r", "r", "r", "r", "r"))  # Align columns to the right



```

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Load the necessary library for creating the table
library(knitr)

# Create the data frame for total contributions over time
contributions_data <- data.frame(
  Year = 2005:2024,
  `Total Contributions (TRS)` = c(9375.00, 10621.88, 10940.53, 11268.75, 11606.81, 
                                  11955.01, 12313.66, 12683.07, 13063.57, 13455.47,
                                  14111.12, 14534.46, 14970.49, 15419.60, 15882.19, 
                                  16358.66, 16849.42, 17354.90, 17875.55, 18411.81),
  `Total Contributions (ORP)` = c(9375.00, 10621.88, 10940.53, 11268.75, 11606.81, 
                                  11955.01, 12313.66, 14527.89, 14963.72, 15412.63, 
                                  16127.00, 16610.81, 17109.13, 17622.40, 18151.08,
                                  18695.61, 19256.48, 19834.17, 20429.20, 21042.07)
)

# Display the table using kable
kable(contributions_data, caption = "Comparison of the Total Contributions over Time (2005 to 2024)", 
      digits = 2, col.names = c("Year", "Total Contributions (TRS)", "Total Contributions (ORP)"))
```

**Conclusion:**

-   Before 2012, both plans are equally beneficial, with identical contribution amounts.
-   After 2011, ORP offers a superior retirement benefit due to the increase in employer contributions. The ORP's 10% employer contribution outpaces TRS's stable 8% employer contribution.
-   The gap between ORP and TRS contributions continues to grow each year as the salary increases, making ORP the better plan for employees in terms of total retirement contributions, especially for those with higher salaries or longer service years.

## Task 6: Fixed Rate Analysis

In this task, we will project an employee's pension benefit (for TRS) and withdrawal amounts (for ORP) from retirement until death. We will use the assumptions from the previous section to estimate the fixed-rate retirement benefits for both plans and compare them over the employee's retirement lifespan.

Key Assumptions:

-   The employee retires in October 2024 at age 60.
-   The employee is expected to live until age 88, which gives them 28 years of retirement.
-   Pension Benefit is based on a fixed formula that guarantees monthly payments for life.
-   The TRS retirement benefit increases with a Cost-of-Living Adjustment (COLA) of 2% per year, based on historical averages.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true
# Set parameters for simulation
starting_salary <- 75000  # Starting salary for the hypothetical employee
salary_growth_rate <- 0.03  # Annual salary growth rate of 3%
years_worked <- 20  # Number of years worked (2005 to 2024)
retirement_age <- 60  # Age at retirement
death_age <- 88  # Age at death

# Assuming the total contributions in 2024 are equal for both TRS and ORP
total_contrib_2024 <- 21042.07  # Based on the total contribution for 2024 (from ORP)
COLA_rate <- 0.02  # Cost-of-living adjustment for TRS
investment_return_rate <- 0.05  # Average market return rate for ORP
retirement_years <- death_age - retirement_age  # Number of retirement years

# Function to simulate TRS and ORP benefits over retirement period
simulate_retirement_benefits <- function(total_contrib_2024, COLA_rate, investment_return_rate, retirement_years) {
  # Initialize vectors to store the pension/withdrawal values over time
  trs_pension <- numeric(retirement_years)
  orp_balance <- numeric(retirement_years)
  orp_withdrawals <- numeric(retirement_years)
  
  # TRS pension benefit starts with the total contribution in the final year, increases by COLA every year
  trs_pension[1] <- total_contrib_2024 / 12  # Monthly pension based on total contributions divided by 12 months
  for (i in 2:retirement_years) {
    trs_pension[i] <- trs_pension[i-1] * (1 + COLA_rate)  # Apply COLA increase every year
  }
  
  # ORP balance grows at the investment rate, and monthly withdrawals are calculated
  orp_balance[1] <- total_contrib_2024  # Initial balance in ORP
  monthly_withdrawal_orp <- orp_balance[1] * 0.05 / 12  # Assumption: ORP withdrawals are based on a 5% annual return
  
  for (i in 1:retirement_years) {
    if (i > 1) {
      # Apply 5% return to the ORP balance before withdrawal
      orp_balance[i] <- orp_balance[i-1] * (1 + investment_return_rate)
    }
    # Withdraw fixed monthly amount from ORP
    orp_withdrawals[i] <- monthly_withdrawal_orp
  }
  
  # Return the pension and ORP withdrawal data
  return(data.frame(
    Year = retirement_age:(death_age - 1),
    TRS_Pension = trs_pension,
    ORP_Withdrawals = orp_withdrawals
  ))
}

# Simulate the benefits for both TRS and ORP
retirement_benefits <- simulate_retirement_benefits(total_contrib_2024, COLA_rate, investment_return_rate, retirement_years)

# Display the table comparing TRS vs ORP over retirement
kable(retirement_benefits, 
      col.names = c("Year", "TRS Pension (Monthly)", "ORP Withdrawals (Monthly)"),
      caption = "Monthly Income Comparison: TRS vs ORP (2005-2024)",
      format = "html", digits = 2, align = c("l", "r", "r"))
```

## Task 7: Monte Carlo Analysis

In this section, we present our Monte Carlo analysis results comparing the TRS (Teachers' Retirement System) and ORP (Optional Retirement Program) plans for CUNY employees. We utilize bootstrap sampling to create 200 “bootstrap histories” from historical data on wage growth, inflation, equity returns, and bond returns. This approach allows us to generate different possible future scenarios and evaluate the retirement benefits for employees under both plans.

```{r, message = FALSE, warning = FALSE}
#| code-fold: true

# Set parameters for simulation
num_bootstraps <- 200
starting_salary <- 50000
retirement_age <- 55
max_age <- 85
initial_orp_balance <- 100000
withdrawal_rate <- 0.04  # 4% withdrawal rate
final_average_salary_percentages <- c(0.0167, 0.0175, 0.35)  # TRS tier percentages (example)

# Combine all data into one data frame
all_data <- wage_growth_data %>%
  left_join(inflation_data, by = "observation_date") %>%
  left_join(us_equity_data, by = "observation_date") %>%
  left_join(intl_equity_data, by = "observation_date") %>%
  left_join(bond_data, by = "observation_date") %>%
  left_join(short_term_debt, by = "observation_date")

# Hypothetical data simulation
historical_data <- data.frame(
  wage_growth = rnorm(20, mean = 3, sd = 1), 
  inflation = rnorm(20, mean = 2, sd = 1),  
  us_equity_returns = rnorm(20, mean = 7, sd = 5),  
  int_equity_returns = rnorm(20, mean = 6, sd = 4), 
  bond_returns = rnorm(20, mean = 3, sd = 2)  
)

# Initialize lists to store results
orp_exhaustion_prob <- numeric(num_bootstraps)
orp_higher_income_prob <- numeric(num_bootstraps)
avg_trs_income <- numeric(num_bootstraps)
avg_orp_income <- numeric(num_bootstraps)

# Monte Carlo Simulation
set.seed(100)  
for (i in 1:num_bootstraps) {
  # Step 1: Bootstrap sampling from historical data
  bootstrap_sample <- historical_data[sample(nrow(historical_data), nrow(historical_data), replace = TRUE), ]
  
  # Step 2: Simulate salary growth
  wages <- numeric(max_age - retirement_age + 1)
  wages[1] <- starting_salary
  for (j in 2:(max_age - retirement_age + 1)) {
    wage_growth <- mean(bootstrap_sample$wage_growth)
    inflation <- mean(bootstrap_sample$inflation)
    wages[j] <- wages[j - 1] * (1 + wage_growth / 100) * (1 - inflation / 100)
  }
  
  # Step 3: Simulate TRS (Defined Benefit Pension)
  final_salary <- mean(tail(wages, 3))  # Final Average Salary from last 3 years
  trs_monthly_benefit <- final_salary * final_average_salary_percentages[1]  # Using the first tier percentage for calculation
  
  # Adjust TRS income for inflation each year during retirement
  trs_income <- numeric(max_age - retirement_age + 1)
  trs_income[1] <- trs_monthly_benefit
  for (k in 2:(max_age - retirement_age + 1)) {
    trs_income[k] <- trs_income[k - 1] * (1 + mean(bootstrap_sample$inflation) / 100)  # Adjust by inflation
  }
  
  # Step 4: Simulate ORP (Defined Contribution Plan)
  orp_balance <- initial_orp_balance
  orp_income <- numeric(max_age - retirement_age + 1)
  for (k in 1:(max_age - retirement_age + 1)) {
    orp_income[k] <- orp_balance * withdrawal_rate
    orp_balance <- orp_balance - orp_income[k]
    if (orp_balance < 0) {
      orp_balance <- 0
    }
  }
  
  # Step 5: Track metrics for each bootstrap simulation
  avg_trs_income[i] <- mean(trs_income)
  avg_orp_income[i] <- mean(orp_income)
  
  # Check if ORP funds are exhausted before death
  orp_exhaustion_prob[i] <- ifelse(orp_balance == 0, 1, 0)
  
  # Check if ORP has higher monthly income than TRS in retirement
  orp_higher_income_prob[i] <- ifelse(mean(orp_income) > mean(trs_income), 1, 0)
}

# Calculate final statistics
results <- data.frame(
  Metric = c("Average Monthly TRS Income", "Average Monthly ORP Income", 
             "Probability ORP Exhausts Before Death", "Probability ORP Higher Income"),
  Value = c(mean(avg_trs_income), mean(avg_orp_income),
            mean(orp_exhaustion_prob), mean(orp_higher_income_prob))
)

kable(results, caption = "Summary of Final Statistics")

```


**Key Insights:**

- **Average Monthly TRS Income**: TRS participants receive an average monthly income of $1,457.24. This reflects the plan’s stable, defined benefit structure, offering consistent, inflation-adjusted payments.

- **Average Monthly ORP Income**: ORP participants earn an average of $2,315.80 per month. Since ORP income depends on investment returns, it can vary with market performance. While the average income is higher than TRS, it comes with more risk and volatility.

## Data-Driven Recommendation

Based on this analysis, here’s my recommendation for CUNY employees considering the TRS and ORP plans:

- **TRS (Stability)**: The TRS plan offers stable, inflation-adjusted income, making it a low-risk option for employees who prioritize financial security. It’s ideal for those nearing retirement or those who prefer guaranteed benefits over investment growth. If you value consistent income and low risk, TRS is a reliable choice.

- **ORP (Growth)**: The ORP plan offers potential for higher returns, tied to the performance of equities and bonds. However, it comes with risks, as market fluctuations can affect income and savings. ORP is best for employees with higher risk tolerance who are comfortable managing their investments and seeking long-term growth.

Both plans have distinct advantages. Employees seeking stability should choose TRS, while those willing to take on more risk for higher potential returns may prefer ORP.



